@page "/lifeCycle"
@using System.Threading
<PageTitle>Life Cycle</PageTitle>

<h1>Life Cycle</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@foreach(var item in EventType)
{
    <p>@item</p>
    <hr />
}
@count <button @onclick="StartCountdown">Start Countdown</button>
<div class="border">
    <_LifeCycleChildComp CountValue="@currentCount"></_LifeCycleChildComp>
</div>
@code {
    private int currentCount = 0;
    private int count = 5;
    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }
    protected override async Task OnInitializedAsync()
    {

        EventType.Add("OnInitializedAsync");
    }
    protected override void OnInitialized()
    {

        EventType.Add("OnInitialized !");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet");
    }
    protected override async Task OnParametersSetAsync()
    {

        EventType.Add("OnParametersSetAsync");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 100;
        }
        else currentCount = 200;
        EventType.Add("OnAfterRedner");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        EventType.Add("OnAfterRednerAsync");
    }
    protected override bool ShouldRender()
    {
        EventType.Add("Should render");
        return true;
    }
    void StartCountdown()
    { 
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }
    void TimeCallBack(object state)
    {
        if(count>0)
        {
            count--;
            InvokeAsync(StateHasChanged);
        }
	}


}
