@page "/blazorForms"

<div class="col-16 offset-md-2 col-md-8 border-">
	<div class="text-center pt-4">
		<h2 class="text-success">Product Form</h2>
		<hr />

	</div>
	<div class="mx-2 px-2">
		<EditForm FormName="ProductCreate" Model="Product" OnInvalidSubmit="HandleProductCreateInvalid" OnValidSubmit="HandleProductCreate">
			<DataAnnotationsValidator/>

			<div class="form-group py-2">
				Product Name
				<InputText  class="form-control" @bind-Value="@Product.Name" />
				<ValidationMessage For="@(()=>Product.Name)" />

			</div>
			<div class="form-group py-2">
				Price
				<InputNumber class="form-control" @bind-Value="@Product.Price"/>
				<ValidationMessage For="@(()=>Product.Price)" />

			</div>
			<div class="form-group py-2">
				Active
				<InputCheckbox  @bind-Value="@Product.IsActive"/>
				<ValidationMessage For="@(()=>Product.IsActive)" />

			</div>
			<div class="form-group py-2">
				AvailableAfter
				<InputDate class="form-control" @bind-Value="@Product.AvailableAfter" />
				<ValidationMessage For="@(()=>Product.AvailableAfter)" />

			</div>
			<div class="form-group py-2">
				Category
				<InputSelect class="form-control" @bind-Value="@Product.Category">
					@foreach (var cat in Enum.GetValues(typeof(Category)))
					{
						<option value="@cat">@cat</option>
					}
				</InputSelect>
				<ValidationMessage For="@(()=>Product.Category)" />

			</div>
			<button type="submit" class="btn btn-primary my-3" style="width:200px;">Create Product</button>
			<p class="text-success">@(IsProcessing?"Processing":"")</p>
		</EditForm>
		@* <EditForm FormName="ProductCreate" Model="ProductTemp" OnValidSubmit="HandleProductCreateTemp">
		</EditForm> *@
	</div>
	@if (CreatedProduct != null)
	{
		<div class="alert alert-success">
			<h4>Product Created</h4>
			<p>Product Name: @CreatedProduct.Name</p>
			<p>Price: @CreatedProduct.Price</p>
			<p>Active: @CreatedProduct.IsActive</p>
			<p>Available After: @CreatedProduct.AvailableAfter</p>
			<p>Category: @CreatedProduct.Category</p>
		</div>
	}
</div>

@code {
	[SupplyParameterFromForm(Name="ProductCreate")]
	public Product Product { get; set; } = new Product();
	// [SupplyParameterFromForm(Name = "ProductCreateTemp")]
	// public Product ProductTemp { get; set; } = new Product();
	private Product? CreatedProduct { get; set; }
	private bool IsProcessing { get; set; } = false;


	private async Task HandleProductCreate()
	{
		IsProcessing = true;
		await Task.Delay(1000);
		CreatedProduct = null;
		CreatedProduct = Product;
		Product = new Product();
		IsProcessing = false;
	}
	// private async Task HandleProductCreateTemp()
	// {
	// 	IsProcessing = true;
	// 	await Task.Delay(1000);
	// 	CreatedProduct = null;
	// 	CreatedProduct = ProductTemp;
	// 	ProductTemp = new Product();
	// 	IsProcessing = false;
	// }
	private async Task HandleProductCreateInvalid()
	{
		IsProcessing = true;
		await Task.Delay(1000);

		IsProcessing = false;
	}
}
